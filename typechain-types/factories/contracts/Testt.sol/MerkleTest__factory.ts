/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MerkleTest,
  MerkleTestInterface,
} from "../../../contracts/Testt.sol/MerkleTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "checkValidity",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "root",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_newRoot",
        type: "bytes32",
      },
    ],
    name: "setRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506103b1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635f1d1da914610046578063dab5f3401461006e578063ebf0c71714610083575b600080fd5b610059610054366004610261565b61009a565b60405190151581526020015b60405180910390f35b61008161007c366004610325565b600055565b005b61008c60005481565b604051908152602001610065565b60006100cd826040516020016100b291815260200190565b6040516020818303038152906040528051906020012061014d565b61010c600054836040516020016100e691815260200190565b60405160208183030381529060405280519060200120856101959092919063ffffffff16565b6101445760405162461bcd60e51b81526020600482015260056024820152640d0c4d0c4d60db1b604482015260640160405180910390fd5b50600192915050565b6101928160405160240161016391815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166327b7cf8560e01b1790526101ab565b50565b6000826101a285846101cc565b14949350505050565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b600081815b8451811015610211576101fd828683815181106101f0576101f061033e565b6020026020010151610219565b91508061020981610354565b9150506101d1565b509392505050565b6000818310610235576000828152602084905260409020610244565b60008381526020839052604090205b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561027457600080fd5b823567ffffffffffffffff8082111561028c57600080fd5b818501915085601f8301126102a057600080fd5b81356020828211156102b4576102b461024b565b8160051b604051601f19603f830116810181811086821117156102d9576102d961024b565b6040529283528183019350848101820192898411156102f757600080fd5b948201945b83861015610315578535855294820194938201936102fc565b9997909101359750505050505050565b60006020828403121561033757600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161037457634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122061a6295c6e8d58eabd2692b148f99fe8db42d026ecf182db3e634503b36135cf64736f6c63430008130033";

type MerkleTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleTest__factory extends ContractFactory {
  constructor(...args: MerkleTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MerkleTest> {
    return super.deploy(overrides || {}) as Promise<MerkleTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MerkleTest {
    return super.attach(address) as MerkleTest;
  }
  override connect(signer: Signer): MerkleTest__factory {
    return super.connect(signer) as MerkleTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTestInterface {
    return new utils.Interface(_abi) as MerkleTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleTest {
    return new Contract(address, _abi, signerOrProvider) as MerkleTest;
  }
}
